// tslint:disable
/**
 * Yuforium API Specification
 * Yuforium API specification
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, HttpQuery, throwIfNullOrUndefined, encodeURI, OperationOpts, RawAjaxResponse } from '../runtime';
import {
    PersonDto,
    UserContentQueryOptionsDto,
    UserCreateDto,
} from '../models';

export interface GetRequest {
    username: string;
}

export interface GetContentRequest {
    username: string;
    contentQuery?: UserContentQueryOptionsDto;
}

export interface GetInboxRequest {
    username: string;
}

export interface PostInboxRequest {
    username: string;
}

export interface UserControllerCreateRequest {
    userCreateDto: UserCreateDto;
}

/**
 * no description
 */
export class UserApi extends BaseAPI {

    /**
     */
    find(): Observable<void>
    find(opts?: OperationOpts): Observable<void | RawAjaxResponse<void>>
    find(opts?: OperationOpts): Observable<void | RawAjaxResponse<void>> {
        return this.request<void>({
            url: '/user',
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     */
    get({ username }: GetRequest): Observable<void>
    get({ username }: GetRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>>
    get({ username }: GetRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>> {
        throwIfNullOrUndefined(username, 'username', 'get');

        return this.request<void>({
            url: '/user/{username}'.replace('{username}', encodeURI(username)),
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     */
    getContent({ username, contentQuery }: GetContentRequest): Observable<void>
    getContent({ username, contentQuery }: GetContentRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>>
    getContent({ username, contentQuery }: GetContentRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>> {
        throwIfNullOrUndefined(username, 'username', 'getContent');

        const query: HttpQuery = {};

        if (contentQuery != null) { query['contentQuery'] = contentQuery; }

        return this.request<void>({
            url: '/user/{username}/content'.replace('{username}', encodeURI(username)),
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    getInbox({ username }: GetInboxRequest): Observable<void>
    getInbox({ username }: GetInboxRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>>
    getInbox({ username }: GetInboxRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>> {
        throwIfNullOrUndefined(username, 'username', 'getInbox');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<void>({
            url: '/user/{username}/inbox'.replace('{username}', encodeURI(username)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     */
    postInbox({ username }: PostInboxRequest): Observable<void>
    postInbox({ username }: PostInboxRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>>
    postInbox({ username }: PostInboxRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>> {
        throwIfNullOrUndefined(username, 'username', 'postInbox');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<void>({
            url: '/user/{username}/inbox'.replace('{username}', encodeURI(username)),
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     */
    userControllerCreate({ userCreateDto }: UserControllerCreateRequest): Observable<void>
    userControllerCreate({ userCreateDto }: UserControllerCreateRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>>
    userControllerCreate({ userCreateDto }: UserControllerCreateRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>> {
        throwIfNullOrUndefined(userCreateDto, 'userCreateDto', 'userControllerCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<void>({
            url: '/user',
            method: 'POST',
            headers,
            body: userCreateDto,
        }, opts?.responseOpts);
    };

    /**
     */
    userControllerWhoAmI(): Observable<void>
    userControllerWhoAmI(opts?: OperationOpts): Observable<void | RawAjaxResponse<void>>
    userControllerWhoAmI(opts?: OperationOpts): Observable<void | RawAjaxResponse<void>> {
        return this.request<void>({
            url: '/user/whoami',
            method: 'GET',
        }, opts?.responseOpts);
    };

}
